{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","result","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFethcGifs","GifExpertApp","categories","i","divRoot","document","querySelector","ReactDOM","render"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,mCACI,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMd,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAlBxB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,QCRlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGhC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCRPK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAAUF,GAF7C,+DAIEG,MAAMR,GAJR,cAIbS,EAJa,gBAMEA,EAAOC,OANT,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CAEHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAbvB,kBAiBZY,GAjBY,4CAAH,sDCMPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAEZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA8BtC,OAvBAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GAWFH,EAAS,CACLT,KAAMY,EACNL,SAAS,MAId,CAACb,OAILc,EDzBwBK,CAAanB,GAAhCU,EAFuB,EAE5BJ,KAAaO,EAFe,EAEfA,QAqBpB,OACI,mCACI,sBAAKjB,UAAU,YAAf,UACI,6BAAKI,IACJa,GAAW,wCACZ,6BAiBQH,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,eEnBnC2B,EA7BM,WAAM,MAIazC,mBAAS,IAJtB,mBAIhB0C,EAJgB,KAIJ3C,EAJI,KAUvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWb,KAAI,SAACR,EAAUsB,GACvB,OAAO,cAAC,EAAD,CAAiBtB,SAAUA,GAAbsB,YCjBtCC,EAAUC,SAASC,cAAc,SAGvCC,IAASC,OAAO,cAAC,EAAD,IAA8BJ,K","file":"static/js/main.aeb4da02.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// es importante el {} ya que se desructuran los elementos\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n      //  console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n\r\n            setCategories(cats => [inputValue,...cats])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\r\n            </form>\r\n        </>\r\n    )\r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    {\r\n\r\n        return (\r\n            <div className=\"card animate__animated animate__fadeIn\">\r\n                <img src={url} alt={title}/>\r\n                <p>{title}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=iwpuLCFlLwwvYuHTISV8CrwWFLSNz8Ox`;\r\n\r\n    const result = await fetch(url);\r\n\r\n    const {data} = await result.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url, // Con el ? indicamos que si viene la colección images trae la data\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\nimport {useFethcGifs} from \"../hooks/useFetchGifs\";\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFethcGifs(category);\r\n\r\n    // console.log(loading)\r\n\r\n\r\n    // return (\r\n    //     <>\r\n    //         <h3>Category</h3>\r\n    //         {loading ? 'Cargando....' : 'Data Cargada'}\r\n    //     </>\r\n    // )\r\n//     const [images, setImages] = useState([])\r\n//\r\n// // El useeffect solo se ejecutara solo cuando el componente se reenderiza la primera vez\r\n//     useEffect(() => {\r\n//         getGifs(category)\r\n//             // .then(imgs => setImages(imgs)) //Esto lo podemos hacer, o la opción de abajo, donde el primer argumento se envia por debajo\r\n//             .then(setImages)\r\n//\r\n//     }, [category]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card-grid\">\r\n                <h3>{category}</h3>\r\n                {loading && <p>Loading</p>}\r\n                <ol>\r\n                    {\r\n                        /*   images.map((image, i) => {\r\n                               return <GifGridItem image={image.url}></GifGridItem>\r\n                               //return <li key={image.id}><img src={image.url} alt= {image.title}/> </li>\r\n                       })*/\r\n                        /**\r\n                         * De esta manera mandamos todo el objeto sin destructurar, no es necesario alicar el return\r\n                         */\r\n                        // images.map(img => (\r\n                        //     <GifGridItem img={img} key={img.id}></GifGridItem>\r\n                        // ))\r\n\r\n                        /**\r\n                         * De esta manera se envian todos los argumentos como variables independientes, spread destructaración\r\n                         */\r\n\r\n                        images.map(img => (\r\n                            <GifGridItem key={img.id} {...img}></GifGridItem>\r\n                        ))\r\n                    }\r\n\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFethcGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                //     setTimeout(() => {\r\n                //         setState({\r\n                //             data: imgs,\r\n                //             loading: false\r\n                //         })\r\n                //     }, 3000)\r\n                //\r\n                //\r\n                // }, [category]);\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n\r\n\r\n            }, [category]);\r\n\r\n    })\r\n\r\n    return state\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['Goku', 'Vegeta', 'Cell']\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    // Los tres puntos significas que vamos a concatenera el elemento con otro (Operador spread)\r\n    // const addNewCaracter = () => {\r\n    //     setCategories([...categories, 'HunterxHunter']);\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}></AddCategory>\r\n            <hr/>\r\n            {/*<button onClick={addNewCaracter}>Agregar nuevo elemento</button>*/}\r\n            <ol>\r\n                {\r\n                    categories.map((category, i) => {\r\n                       return <GifGrid key={i} category={category}></GifGrid>\r\n                      //  return <li key={i}>{category}</li>\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\n\nconst divRoot = document.querySelector('#root');\n\n\nReactDOM.render(<GifExpertApp></GifExpertApp>,divRoot)\n"],"sourceRoot":""}